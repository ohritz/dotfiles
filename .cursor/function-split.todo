# Function Splitting Project Plan
# ================================

## IMPORTANT: Agent Instructions
- NO commits or git actions should be performed by any agent following this plan
- Stop at each logical section and let the user review progress
- All changes are to be made in the repository root (~/.local/share/chezmoi)
- Follow zsh best practices for function organization and naming

## Phase 1: Analysis and Planning
### Step 1.1: Function Inventory
- [ ] Scan all files in dot_zsh/functions/ to identify all functions
- [ ] Document function names, their purposes, and dependencies
- [ ] Identify functions that are already autoloaded (ssh_tools.zsh has autoload hooks)
- [ ] Note any functions with special requirements (prompt hooks, precmd hooks, etc.)

### Step 1.2: Function Naming Analysis
- [ ] Review all function names for consistency
- [ ] Identify functions with illegal names for zsh autoloading
- [ ] Plan renaming strategy for problematic function names
- [ ] Ensure function names follow zsh conventions (lowercase, descriptive)

### Step 1.3: Dependency Mapping
- [ ] Map function dependencies (which functions call other functions)
- [ ] Identify shared variables or global state
- [ ] Document any functions that modify global environment
- [ ] Note functions that require specific environment variables

## Phase 2: Folder Structure Design
### Step 2.1: Create New Directory Structure
Based on zsh best practices and function purposes:

```
dot_zsh/functions/
├── git/                    # Git-related functions
│   ├── _git-remote-gone-ls
│   ├── _git-remote-gone-rm
│   ├── _git-co-task
│   ├── _git-worktree-add
│   ├── _git-worktree-rm
│   ├── _git-worktree-cd
│   └── _select-worktree
├── ssh/                    # SSH and connection functions
│   ├── _ensure-ssh
│   ├── _maybe-ensure-ssh
│   ├── _kill-ssh-pipe
│   ├── _check-ssh
│   ├── _prompt-my-ssh-relay-status
│   ├── _wsl-vpnkit
│   └── _wsl-vpnkit-stop
├── prompt/                 # Prompt-related functions
│   ├── _set-prompt-message
│   └── _prompt-my-message
├── docker/                 # Docker-related functions
│   └── [stena_docker functions]
├── kubernetes/             # Kubernetes functions
│   └── [kubectl_helpers functions]
├── aws/                    # AWS-related functions
│   └── [aws_tools functions]
├── ssl/                    # SSL/TLS functions
│   └── [ssl_tools functions]
├── build/                  # Build and development functions
│   └── [build_tools functions]
├── utils/                  # General utility functions
│   ├── _bathelp
│   ├── _help
│   └── [utils.zsh functions]
├── spinner/                # Spinner and progress functions
│   ├── _spinner
│   └── [spinner.zsh functions]
├── chat/                   # Chat and AI functions
│   └── [chatGPT functions]
├── proxy/                  # Proxy and network functions
│   └── [mitmproxy_helper functions]
└── wsl/                    # WSL-specific functions
    └── [wsl_vpnkit functions]
```

### Step 2.2: Function Naming Conventions
- [ ] All function files should start with underscore (_) for autoloading
- [ ] Use kebab-case for function names (e.g., _git-remote-gone-ls)
- [ ] Function names should be descriptive and indicate their purpose
- [ ] Avoid special characters that might cause autoload issues

## Phase 3: Function Extraction and Splitting
### Step 3.1: Create New Directory Structure
- [ ] Create all new subdirectories in dot_zsh/functions/
- [ ] Ensure proper permissions on directories

### Step 3.2: Extract Functions from git.zsh
- [ ] Create individual files for each git function
- [ ] Ensure proper function naming (add underscores)
- [ ] Test each function individually
- [ ] Document any dependencies between functions

### Step 3.3: Extract Functions from ssh_tools.zsh
- [ ] Handle special case: functions with autoload hooks
- [ ] Preserve the precmd hook functionality
- [ ] Ensure ensure_ssh and maybe_ensure_ssh work correctly
- [ ] Test SSH relay functionality

### Step 3.4: Extract Functions from prompt_messages.zsh
- [ ] Create _set-prompt-message function
- [ ] Create _prompt-my-message function
- [ ] Ensure prompt integration works correctly
- [ ] Test prompt message functionality

### Step 3.5: Extract Functions from Other Files
- [ ] Process each remaining file systematically
- [ ] Extract functions to appropriate subdirectories
- [ ] Maintain function dependencies
- [ ] Test each extracted function

## Phase 4: Autoload Configuration
### Step 4.1: Update fpath Configuration
- [ ] Modify dot_zsh/load_functions.zsh to add new directories to fpath
- [ ] Ensure proper order of fpath additions
- [ ] Test that autoload can find all functions

### Step 4.2: Configure Autoload for Individual Functions
- [ ] Add autoload statements for each function
- [ ] Group autoload statements by category
- [ ] Ensure proper loading order for dependent functions

### Step 4.3: Handle Special Cases
- [ ] Configure autoload for functions with hooks (ssh_tools)
- [ ] Ensure prompt functions load at the right time
- [ ] Handle any functions that need to be sourced instead of autoloaded

## Phase 5: Testing and Validation
### Step 5.1: Function Testing
- [ ] Test each individual function after extraction
- [ ] Verify function dependencies work correctly
- [ ] Test autoload functionality for each function
- [ ] Ensure no function conflicts or naming issues

### Step 5.2: Integration Testing
- [ ] Test complete zsh startup process
- [ ] Verify all functions are available when needed
- [ ] Test prompt functionality with new structure
- [ ] Verify SSH relay functionality works

### Step 5.3: Performance Testing
- [ ] Measure zsh startup time with new structure
- [ ] Ensure autoloading doesn't impact performance
- [ ] Test lazy loading where appropriate

## Phase 6: Cleanup and Documentation
### Step 6.1: Remove Old Files
- [ ] Remove original multi-function files after successful migration
- [ ] Update any references to old file names
- [ ] Clean up any temporary files

### Step 6.2: Update Documentation
- [ ] Update load_functions.zsh comments
- [ ] Document the new function organization
- [ ] Create function usage documentation
- [ ] Update any README files

### Step 6.3: Final Validation
- [ ] Run chezmoi doctor to check for issues
- [ ] Test chezmoi diff to preview changes
- [ ] Verify all functions work in different environments
- [ ] Final user review and approval

## Notes for Implementation
- Each function file should contain only one function
- Function names in files should match the filename (without underscore)
- All functions should be properly documented with comments
- Maintain backward compatibility where possible
- Follow zsh best practices for function organization
- Ensure proper error handling in each function
- Test thoroughly before moving to next phase

## Stopping Points for User Review
1. After Phase 1 completion (Analysis and Planning)
2. After Phase 2 completion (Folder Structure Design)
3. After each major file extraction (git.zsh, ssh_tools.zsh, etc.)
4. After Phase 4 completion (Autoload Configuration)
5. After Phase 5 completion (Testing and Validation)
6. Before Phase 6 cleanup (Final review before removing old files)
